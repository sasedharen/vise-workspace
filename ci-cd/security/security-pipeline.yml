# Security Scanning Pipeline for VISE Project
# Comprehensive security checks for 500 developers

variables:
  SECURITY_SCANNER_IMAGE: "owasp/zap2docker-stable"
  TRIVY_VERSION: "latest"
  GOSEC_VERSION: "latest"
  SEMGREP_VERSION: "latest"
  
  # Security thresholds
  MAX_CRITICAL_VULNERABILITIES: "0"
  MAX_HIGH_VULNERABILITIES: "5"
  MAX_MEDIUM_VULNERABILITIES: "20"
  
  # Scan timeouts
  SAST_TIMEOUT: "30m"
  DAST_TIMEOUT: "45m"
  CONTAINER_SCAN_TIMEOUT: "20m"

stages:
  - security-validate
  - static-analysis
  - dependency-scan
  - container-scan
  - dynamic-analysis
  - security-report

# Base template for security jobs
.security-template: &security-template
  tags:
    - docker
    - security-scanner
  allow_failure: false
  timeout: 30m

###########################################
# SECURITY VALIDATION STAGE
###########################################

secrets-detection:
  <<: *security-template
  image: trufflesecurity/trufflehog:latest
  stage: security-validate
  script:
    # Scan for secrets in git history
    - trufflehog git file://. --json > secrets-report.json
    
    # Check for hardcoded secrets in code
    - |
      if grep -r -i "password\|secret\|key\|token" . \
        --include="*.go" --include="*.ts" --include="*.js" --include="*.yml" --include="*.yaml" \
        --exclude-dir=node_modules --exclude-dir=.git --exclude="*.md" \
        | grep -v "example\|test\|mock\|placeholder"; then
        echo "Potential hardcoded secrets found!"
        exit 1
      fi
    
    # Check for exposed configuration
    - |
      find . -name "*.env*" -o -name "config.yml" -o -name "config.yaml" \
        | xargs -I {} sh -c 'echo "Checking: {}" && cat {}'
  artifacts:
    reports:
      secret_detection: secrets-report.json
    paths:
      - secrets-report.json
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

license-compliance:
  <<: *security-template
  image: node:18-alpine
  stage: security-validate
  before_script:
    - npm install -g license-checker
  script:
    # Backend license check (Go modules)
    - cd vise-backend
    - go mod tidy
    - |
      # Check for restrictive licenses in Go dependencies
      go list -m all | while read module version; do
        if [[ "$module" =~ (gpl|agpl|copyleft) ]]; then
          echo "Warning: Potentially restrictive license in $module"
        fi
      done
    
    # Frontend license check
    - cd ../vise-frontend
    - npm ci --only=prod
    - license-checker --summary
    - license-checker --json > ../license-report.json
    
    # Check for forbidden licenses
    - |
      forbidden_licenses=("GPL" "AGPL" "WTFPL" "Unlicense")
      for license in "${forbidden_licenses[@]}"; do
        if license-checker --summary | grep -i "$license"; then
          echo "Forbidden license found: $license"
          exit 1
        fi
      done
  artifacts:
    paths:
      - license-report.json
    expire_in: 1 week
  allow_failure: true
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

###########################################
# STATIC ANALYSIS STAGE
###########################################

go-security-scan:
  <<: *security-template
  image: securecodewarrior/gosec:$GOSEC_VERSION
  stage: static-analysis
  script:
    - cd vise-backend
    
    # Run gosec security scanner
    - gosec -fmt json -out ../gosec-report.json -stdout -verbose=text -severity medium ./...
    
    # Check for common security issues
    - |
      # SQL injection patterns
      if grep -r "db\.Query\|db\.Exec" . --include="*.go" | grep -v "Prepare\|QueryRow"; then
        echo "Potential SQL injection vulnerabilities found"
      fi
      
      # Hardcoded credentials
      if grep -r "password.*=\|token.*=\|secret.*=" . --include="*.go"; then
        echo "Potential hardcoded credentials found"
      fi
      
      # Insecure random
      if grep -r "math/rand" . --include="*.go"; then
        echo "Use crypto/rand instead of math/rand for security-sensitive operations"
      fi
  artifacts:
    reports:
      sast: gosec-report.json
    paths:
      - gosec-report.json
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

semgrep-scan:
  <<: *security-template
  image: returntocorp/semgrep:$SEMGREP_VERSION
  stage: static-analysis
  script:
    # Run semgrep with multiple rulesets
    - semgrep --config=auto --json --output=semgrep-report.json .
    
    # Custom rules for VISE-specific patterns
    - |
      cat > custom-rules.yml << 'EOF'
      rules:
        - id: hardcoded-db-credentials
          pattern: |
            postgres://postgres:$PASSWORD@$HOST:$PORT/$DB
          message: Hardcoded database credentials detected
          languages: [go, yaml]
          severity: ERROR
          
        - id: jwt-secret-hardcoded
          pattern: |
            jwt.SigningMethodHS256
          message: JWT signing method detected - ensure secret is not hardcoded
          languages: [go]
          severity: WARNING
          
        - id: sql-injection-risk
          pattern: |
            db.Query($QUERY + $INPUT)
          message: Potential SQL injection - use parameterized queries
          languages: [go]
          severity: ERROR
      EOF
    
    - semgrep --config=custom-rules.yml --json --output=semgrep-custom-report.json .
  artifacts:
    reports:
      sast: semgrep-report.json
    paths:
      - semgrep-report.json
      - semgrep-custom-report.json
    expire_in: 1 week
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

frontend-security-scan:
  <<: *security-template
  image: node:18-alpine
  stage: static-analysis
  before_script:
    - cd vise-frontend
    - npm ci
  script:
    # ESLint security rules
    - npx eslint . --ext .ts,.tsx,.js,.jsx --format json --output-file ../eslint-security-report.json || true
    
    # Check for dangerous patterns
    - |
      # innerHTML usage (XSS risk)
      if grep -r "innerHTML\|dangerouslySetInnerHTML" src/ --include="*.ts" --include="*.tsx"; then
        echo "Warning: Found innerHTML usage - potential XSS risk"
      fi
      
      # Eval usage
      if grep -r "\beval\b" src/ --include="*.ts" --include="*.tsx" --include="*.js"; then
        echo "Error: Found eval() usage - security risk"
        exit 1
      fi
      
      # Unsafe href
      if grep -r "href.*javascript:" src/ --include="*.ts" --include="*.tsx"; then
        echo "Error: Found javascript: in href - XSS risk"
        exit 1
      fi
    
    # Audit npm packages
    - npm audit --audit-level moderate --json > ../npm-audit-report.json
  artifacts:
    reports:
      dependency_scanning: npm-audit-report.json
    paths:
      - eslint-security-report.json
      - npm-audit-report.json
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

###########################################
# DEPENDENCY SCAN STAGE
###########################################

go-vulnerability-scan:
  <<: *security-template
  image: golang:1.23-alpine
  stage: dependency-scan
  before_script:
    - apk add --no-cache git
    - go install golang.org/x/vuln/cmd/govulncheck@latest
  script:
    - cd vise-backend
    
    # Check for known vulnerabilities
    - govulncheck -json ./... > ../go-vuln-report.json
    
    # Check for outdated dependencies
    - go list -u -m all > ../go-deps-report.txt
    
    # Check for indirect dependencies
    - go mod why $(go list -m all | awk '{print $1}') > ../go-deps-why.txt
  artifacts:
    paths:
      - go-vuln-report.json
      - go-deps-report.txt
      - go-deps-why.txt
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

npm-vulnerability-scan:
  <<: *security-template
  image: node:18-alpine
  stage: dependency-scan
  script:
    - cd vise-frontend
    
    # Install dependencies
    - npm ci
    
    # Run security audit
    - npm audit --audit-level moderate --json > ../npm-detailed-audit.json
    
    # Check for known vulnerabilities with yarn audit
    - npx yarn audit --json > ../yarn-audit-report.json || true
    
    # Check package signatures
    - npm install -g npm-audit-resolver
    - npm-audit-resolver --audit-level moderate || true
  artifacts:
    reports:
      dependency_scanning: npm-detailed-audit.json
    paths:
      - npm-detailed-audit.json
      - yarn-audit-report.json
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

###########################################
# CONTAINER SCAN STAGE
###########################################

container-security-scan:
  <<: *security-template
  image: aquasec/trivy:$TRIVY_VERSION
  stage: container-scan
  services:
    - docker:24.0.7-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
  script:
    # Scan backend container
    - |
      if docker pull $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHORT_SHA 2>/dev/null; then
        trivy image --format json --output trivy-backend-report.json $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHORT_SHA
        trivy image --format table --severity HIGH,CRITICAL $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHORT_SHA
      fi
    
    # Scan frontend container  
    - |
      if docker pull $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHORT_SHA 2>/dev/null; then
        trivy image --format json --output trivy-frontend-report.json $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHORT_SHA
        trivy image --format table --severity HIGH,CRITICAL $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHORT_SHA
      fi
    
    # Scan base images
    - trivy image --format json --output trivy-golang-report.json golang:1.23-alpine
    - trivy image --format json --output trivy-node-report.json node:18-alpine
    - trivy image --format json --output trivy-postgres-report.json postgres:15-alpine
    
    # Check for critical vulnerabilities
    - |
      for report in trivy-*-report.json; do
        if [ -f "$report" ]; then
          critical=$(cat "$report" | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length')
          high=$(cat "$report" | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length')
          
          echo "Critical vulnerabilities in $report: $critical"
          echo "High vulnerabilities in $report: $high"
          
          if [ "$critical" -gt "$MAX_CRITICAL_VULNERABILITIES" ]; then
            echo "Too many critical vulnerabilities in $report: $critical (max: $MAX_CRITICAL_VULNERABILITIES)"
            exit 1
          fi
          
          if [ "$high" -gt "$MAX_HIGH_VULNERABILITIES" ]; then
            echo "Too many high vulnerabilities in $report: $high (max: $MAX_HIGH_VULNERABILITIES)"
            exit 1
          fi
        fi
      done
  artifacts:
    reports:
      container_scanning: trivy-backend-report.json
    paths:
      - trivy-*-report.json
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

dockerfile-security-scan:
  <<: *security-template
  image: hadolint/hadolint:latest-alpine
  stage: container-scan
  script:
    # Scan Dockerfiles
    - hadolint vise-backend/Dockerfile --format json > hadolint-backend-report.json || true
    - hadolint vise-frontend/Dockerfile --format json > hadolint-frontend-report.json || true
    
    # Check for security best practices
    - |
      dockerfiles=("vise-backend/Dockerfile" "vise-frontend/Dockerfile")
      for dockerfile in "${dockerfiles[@]}"; do
        if [ -f "$dockerfile" ]; then
          echo "Checking $dockerfile for security issues..."
          
          # Check for root user
          if grep -q "USER root" "$dockerfile"; then
            echo "Warning: Running as root user in $dockerfile"
          fi
          
          # Check for latest tags
          if grep -q ":latest" "$dockerfile"; then
            echo "Warning: Using latest tag in $dockerfile"
          fi
          
          # Check for secrets
          if grep -i "password\|secret\|key" "$dockerfile"; then
            echo "Warning: Potential secrets in $dockerfile"
          fi
        fi
      done
  artifacts:
    paths:
      - hadolint-*-report.json
    expire_in: 1 week
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

###########################################
# DYNAMIC ANALYSIS STAGE
###########################################

dast-scan:
  <<: *security-template
  image: $SECURITY_SCANNER_IMAGE
  stage: dynamic-analysis
  services:
    - name: $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHORT_SHA
      alias: backend
    - name: $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHORT_SHA
      alias: frontend
  script:
    # Wait for services to start
    - sleep 30
    
    # Basic ZAP scan against the application
    - mkdir -p /zap/wrk
    - |
      zap-baseline.py -t http://frontend \
        -g gen.conf \
        -J zap-baseline-report.json \
        -r zap-baseline-report.html || true
    
    # API security scan
    - |
      if curl -f http://backend/health 2>/dev/null; then
        zap-api-scan.py -t http://backend \
          -J zap-api-report.json \
          -r zap-api-report.html || true
      fi
    
    # Full scan for main branch
    - |
      if [ "$CI_COMMIT_BRANCH" = "main" ]; then
        zap-full-scan.py -t http://frontend \
          -J zap-full-report.json \
          -r zap-full-report.html || true
      fi
  artifacts:
    reports:
      dast: zap-baseline-report.json
    paths:
      - zap-*-report.*
    expire_in: 1 week
  allow_failure: true
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"
  when: manual

api-security-test:
  <<: *security-template
  image: alpine:3.19
  stage: dynamic-analysis
  before_script:
    - apk add --no-cache curl jq
  script:
    # Test API endpoints for security issues
    - |
      if curl -f http://backend/health 2>/dev/null; then
        echo "Testing API security..."
        
        # Test for SQL injection
        curl -X GET "http://backend/api/v1/lookup/institutions?id=1' OR '1'='1" || true
        
        # Test for XSS
        curl -X GET "http://backend/api/v1/lookup/institutions?search=<script>alert('xss')</script>" || true
        
        # Test for directory traversal
        curl -X GET "http://backend/api/v1/lookup/../../../etc/passwd" || true
        
        # Test for CORS misconfiguration
        curl -H "Origin: http://evil.com" -v http://backend/api/v1/lookup/health || true
        
        # Test for sensitive headers
        curl -v http://backend/api/v1/lookup/health 2>&1 | grep -i "server:\|x-powered-by" || true
      fi
  allow_failure: true
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

###########################################
# SECURITY REPORT STAGE
###########################################

security-dashboard:
  <<: *security-template
  image: python:3.11-alpine
  stage: security-report
  before_script:
    - pip install jinja2 markdown
  script:
    # Generate comprehensive security report
    - |
      cat > generate_report.py << 'EOF'
      import json
      import os
      from datetime import datetime
      from jinja2 import Template
      
      def load_json_report(filename):
          if os.path.exists(filename):
              with open(filename) as f:
                  return json.load(f)
          return {}
      
      # Load all security reports
      reports = {
          'gosec': load_json_report('gosec-report.json'),
          'semgrep': load_json_report('semgrep-report.json'),
          'trivy_backend': load_json_report('trivy-backend-report.json'),
          'trivy_frontend': load_json_report('trivy-frontend-report.json'),
          'npm_audit': load_json_report('npm-audit-report.json'),
          'secrets': load_json_report('secrets-report.json'),
          'zap': load_json_report('zap-baseline-report.json')
      }
      
      # Generate summary
      summary = {
          'timestamp': datetime.now().isoformat(),
          'commit': os.getenv('CI_COMMIT_SHA', 'unknown'),
          'branch': os.getenv('CI_COMMIT_BRANCH', 'unknown'),
          'critical_issues': 0,
          'high_issues': 0,
          'medium_issues': 0,
          'low_issues': 0
      }
      
      # Count issues from each report
      for report_name, data in reports.items():
          if report_name == 'gosec' and 'Issues' in data:
              for issue in data['Issues']:
                  severity = issue.get('severity', '').lower()
                  if severity == 'high':
                      summary['high_issues'] += 1
                  elif severity == 'medium':
                      summary['medium_issues'] += 1
                  else:
                      summary['low_issues'] += 1
      
      # Generate HTML report
      template = Template('''
      <!DOCTYPE html>
      <html>
      <head>
          <title>VISE Security Dashboard</title>
          <style>
              body { font-family: Arial, sans-serif; margin: 20px; }
              .header { background: #f4f4f4; padding: 20px; }
              .summary { display: flex; gap: 20px; margin: 20px 0; }
              .metric { background: #e9e9e9; padding: 15px; border-radius: 5px; }
              .critical { background: #ffebee; border-left: 4px solid #f44336; }
              .high { background: #fff3e0; border-left: 4px solid #ff9800; }
              .medium { background: #f3e5f5; border-left: 4px solid #9c27b0; }
              .low { background: #e8f5e8; border-left: 4px solid #4caf50; }
          </style>
      </head>
      <body>
          <div class="header">
              <h1>VISE Security Dashboard</h1>
              <p>Generated: {{ summary.timestamp }}</p>
              <p>Commit: {{ summary.commit }}</p>
              <p>Branch: {{ summary.branch }}</p>
          </div>
          
          <div class="summary">
              <div class="metric critical">
                  <h3>Critical</h3>
                  <p>{{ summary.critical_issues }}</p>
              </div>
              <div class="metric high">
                  <h3>High</h3>
                  <p>{{ summary.high_issues }}</p>
              </div>
              <div class="metric medium">
                  <h3>Medium</h3>
                  <p>{{ summary.medium_issues }}</p>
              </div>
              <div class="metric low">
                  <h3>Low</h3>
                  <p>{{ summary.low_issues }}</p>
              </div>
          </div>
          
          <h2>Security Tools Results</h2>
          {% for tool, data in reports.items() %}
          <h3>{{ tool.title() }} Report</h3>
          <p>Status: {% if data %}Data Available{% else %}No Data{% endif %}</p>
          {% endfor %}
      </body>
      </html>
      ''')
      
      with open('security-dashboard.html', 'w') as f:
          f.write(template.render(summary=summary, reports=reports))
      
      # Generate JSON summary
      with open('security-summary.json', 'w') as f:
          json.dump(summary, f, indent=2)
      
      print(f"Security Summary: {summary}")
      EOF
    
    - python generate_report.py
    
    # Check if security gates pass
    - |
      if [ -f security-summary.json ]; then
        critical=$(cat security-summary.json | jq -r '.critical_issues')
        high=$(cat security-summary.json | jq -r '.high_issues')
        
        if [ "$critical" -gt "$MAX_CRITICAL_VULNERABILITIES" ]; then
          echo "Security gate failed: $critical critical issues (max: $MAX_CRITICAL_VULNERABILITIES)"
          exit 1
        fi
        
        if [ "$high" -gt "$MAX_HIGH_VULNERABILITIES" ]; then
          echo "Security gate failed: $high high issues (max: $MAX_HIGH_VULNERABILITIES)"
          exit 1
        fi
        
        echo "Security gates passed!"
      fi
  artifacts:
    reports:
      security: security-summary.json
    paths:
      - security-dashboard.html
      - security-summary.json
    expire_in: 1 month
  needs:
    - go-security-scan
    - frontend-security-scan
    - container-security-scan
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

###########################################
# WORKFLOW RULES
###########################################

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"
    - when: never