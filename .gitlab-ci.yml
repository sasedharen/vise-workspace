# GitLab CI/CD Pipeline for VISE Project
# Optimized for 500 developers with Docker-based workflows

variables:
  # Docker settings
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_BUILDKIT: 1
  
  # Go settings
  GO_VERSION: "1.23"
  GOCACHE: "$CI_PROJECT_DIR/.cache/go-build"
  GOMODCACHE: "$CI_PROJECT_DIR/.cache/go-mod"
  CGO_ENABLED: "1"
  
  # Node.js settings
  NODE_VERSION: "18"
  npm_config_cache: "$CI_PROJECT_DIR/.cache/npm"
  PLAYWRIGHT_BROWSERS_PATH: "$CI_PROJECT_DIR/.cache/playwright"
  
  # Database settings
  POSTGRES_DB: vise_test
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: vise
  REDIS_URL: redis://redis:6379/0
  
  # Container registry
  REGISTRY_IMAGE: $CI_REGISTRY_IMAGE
  
  # Version tagging
  VERSION: $CI_COMMIT_SHORT_SHA

# Cache configuration for faster builds
cache:
  key: 
    files:
      - vise-backend/go.mod
      - vise-backend/go.sum
      - vise-frontend/package-lock.json
  paths:
    - .cache/go-build/
    - .cache/go-mod/
    - .cache/npm/
    - .cache/playwright/
    - vise-frontend/node_modules/

# Build stages
stages:
  - validate
  - test
  - build
  - security
  - deploy
  - cleanup

# Services for testing
services:
  - name: postgres:15-alpine
    alias: postgres
    variables:
      POSTGRES_DB: $POSTGRES_DB
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
  - name: redis:7-alpine
    alias: redis

# Template for Go jobs
.go-template: &go-template
  image: golang:1.23-alpine
  tags:
    - docker
    - go-backend-runner
  before_script:
    - apk add --no-cache git make gcc musl-dev
    - cd vise-backend
    - go version
    - go mod download

# Template for Node.js jobs  
.node-template: &node-template
  image: node:18-alpine
  tags:
    - docker
    - react-frontend-runner
  before_script:
    - cd vise-frontend
    - npm ci --prefer-offline --no-audit

# Template for Docker jobs
.docker-template: &docker-template
  image: docker:24.0.7
  services:
    - docker:24.0.7-dind
  tags:
    - docker
    - docker-runner-shared
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"

###########################################
# VALIDATION STAGE
###########################################

# Validate Go code formatting
go-format-check:
  <<: *go-template
  stage: validate
  script:
    - gofmt -l . | tee /tmp/gofmt-output
    - test ! -s /tmp/gofmt-output
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

# Validate Go modules
go-mod-verify:
  <<: *go-template
  stage: validate
  script:
    - go mod verify
    - go mod tidy
    - git diff --exit-code go.mod go.sum
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

# Validate frontend code formatting
frontend-lint:
  <<: *node-template
  stage: validate
  script:
    - npm run lint
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

###########################################
# TESTING STAGE
###########################################

# Backend unit tests
backend-unit-tests:
  <<: *go-template
  stage: test
  script:
    - go test -v -race -coverprofile=coverage.out ./...
    - go tool cover -html=coverage.out -o coverage.html
    - go tool cover -func=coverage.out | tail -1
  coverage: '/total:\s+\(statements\)\s+(\d+\.\d+)%/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: vise-backend/coverage.xml
    paths:
      - vise-backend/coverage.html
      - vise-backend/coverage.out
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

# Backend integration tests
backend-integration-tests:
  <<: *go-template
  stage: test
  variables:
    DB_URL: "postgres://postgres:vise@postgres:5432/vise_test?sslmode=disable"
    REDIS_ADDR: "redis:6379"
  script:
    - make test-integration
  artifacts:
    when: always
    reports:
      junit: vise-backend/integration-test-results.xml
    paths:
      - vise-backend/integration-test-results.xml
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

# Frontend unit tests
frontend-unit-tests:
  <<: *node-template
  stage: test
  script:
    - npm run test:coverage
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: vise-frontend/coverage/cobertura-coverage.xml
      junit: vise-frontend/junit.xml
    paths:
      - vise-frontend/coverage/
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

# Frontend E2E tests
frontend-e2e-tests:
  <<: *node-template
  stage: test
  variables:
    CI: "true"
  before_script:
    - cd vise-frontend
    - npm ci --prefer-offline --no-audit
    - npx playwright install --with-deps chromium
  script:
    - npm run test:e2e
  artifacts:
    when: always
    paths:
      - vise-frontend/playwright-report/
      - vise-frontend/test-results/
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

###########################################
# BUILD STAGE
###########################################

# Build backend binary
build-backend:
  <<: *go-template
  stage: build
  script:
    - make build
    - ./bin/vise-web --version || echo "Binary built successfully"
  artifacts:
    paths:
      - vise-backend/bin/
    expire_in: 1 hour
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_TAG

# Build frontend
build-frontend:
  <<: *node-template
  stage: build
  script:
    - npm run build
  artifacts:
    paths:
      - vise-frontend/dist/
    expire_in: 1 hour
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_TAG

# Build backend Docker image
build-backend-image:
  <<: *docker-template
  stage: build
  script:
    - cd vise-backend
    - |
      if [[ "$CI_COMMIT_BRANCH" == "main" ]]; then
        TAGS="latest $VERSION"
      elif [[ "$CI_COMMIT_BRANCH" == "develop" ]]; then
        TAGS="develop $VERSION"
      else
        TAGS="$VERSION"
      fi
    - |
      for TAG in $TAGS; do
        docker build --build-arg VERSION=$VERSION -t $REGISTRY_IMAGE/backend:$TAG .
        docker push $REGISTRY_IMAGE/backend:$TAG
      done
  needs:
    - build-backend
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_TAG

# Build frontend Docker image
build-frontend-image:
  <<: *docker-template
  stage: build
  script:
    - cd vise-frontend
    - |
      if [[ "$CI_COMMIT_BRANCH" == "main" ]]; then
        TAGS="latest $VERSION"
      elif [[ "$CI_COMMIT_BRANCH" == "develop" ]]; then
        TAGS="develop $VERSION"
      else
        TAGS="$VERSION"
      fi
    - |
      for TAG in $TAGS; do
        docker build --build-arg VERSION=$VERSION -t $REGISTRY_IMAGE/frontend:$TAG .
        docker push $REGISTRY_IMAGE/frontend:$TAG
      done
  needs:
    - build-frontend
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_TAG

###########################################
# SECURITY STAGE
###########################################

# Go security scanning
gosec-scan:
  image: securecodewarrior/gosec:latest
  stage: security
  tags:
    - docker
    - security-scanner
  script:
    - cd vise-backend
    - gosec -fmt json -out gosec-report.json ./...
  artifacts:
    reports:
      sast: vise-backend/gosec-report.json
    paths:
      - vise-backend/gosec-report.json
    expire_in: 1 week
  allow_failure: true
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# Frontend dependency scanning
npm-audit:
  <<: *node-template
  stage: security
  script:
    - npm audit --audit-level moderate
    - npm audit --json > npm-audit-report.json
  artifacts:
    reports:
      dependency_scanning: vise-frontend/npm-audit-report.json
    paths:
      - vise-frontend/npm-audit-report.json
    expire_in: 1 week
  allow_failure: true
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# Container image scanning
container-scan:
  image: aquasec/trivy:latest
  stage: security
  tags:
    - docker
    - security-scanner
  services:
    - docker:24.0.7-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
  script:
    - trivy image --format json --output trivy-report.json $REGISTRY_IMAGE/backend:$VERSION
  artifacts:
    reports:
      container_scanning: trivy-report.json
    paths:
      - trivy-report.json
    expire_in: 1 week
  allow_failure: true
  needs:
    - build-backend-image
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

###########################################
# DEPLOYMENT STAGE
###########################################

# Deploy to development environment
deploy-dev:
  image: alpine:3.19
  stage: deploy
  tags:
    - docker
    - docker-runner-shared
  variables:
    ENVIRONMENT: "development"
  before_script:
    - apk add --no-cache docker-compose
  script:
    - echo "Deploying to development environment..."
    - cd deployments/docker
    - docker-compose down
    - docker-compose pull
    - docker-compose up -d
    - echo "Development deployment completed"
  environment:
    name: development
    url: http://dev.vise.local
  needs:
    - build-backend-image
    - build-frontend-image
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"

# Deploy to staging environment
deploy-staging:
  image: alpine:3.19
  stage: deploy
  tags:
    - docker
    - docker-runner-shared
  variables:
    ENVIRONMENT: "staging"
  before_script:
    - apk add --no-cache docker-compose
  script:
    - echo "Deploying to staging environment..."
    - cd deployments/docker
    - docker-compose -f docker-compose.staging.yml down
    - docker-compose -f docker-compose.staging.yml pull
    - docker-compose -f docker-compose.staging.yml up -d
    - echo "Staging deployment completed"
  environment:
    name: staging
    url: http://staging.vise.local
  needs:
    - build-backend-image
    - build-frontend-image
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  when: manual

# Deploy to production environment
deploy-production:
  image: alpine:3.19
  stage: deploy
  tags:
    - docker
    - docker-runner-shared
  variables:
    ENVIRONMENT: "production"
  before_script:
    - apk add --no-cache docker-compose
  script:
    - echo "Deploying to production environment..."
    - cd deployments/docker
    - docker-compose -f docker-compose.prod.yml down
    - docker-compose -f docker-compose.prod.yml pull
    - docker-compose -f docker-compose.prod.yml up -d
    - echo "Production deployment completed"
  environment:
    name: production
    url: http://vise.local
  needs:
    - build-backend-image
    - build-frontend-image
    - deploy-staging
  rules:
    - if: $CI_COMMIT_TAG
  when: manual

###########################################
# CLEANUP STAGE
###########################################

# Clean up old images
cleanup-images:
  <<: *docker-template
  stage: cleanup
  script:
    - docker system prune -f
    - docker image prune -f
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"
  when: always
  allow_failure: true

###########################################
# WORKFLOW RULES
###########################################

# Workflow rules to control when pipelines run
workflow:
  rules:
    # Run pipeline for merge requests
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    # Run pipeline for main branch
    - if: $CI_COMMIT_BRANCH == "main"
    # Run pipeline for develop branch
    - if: $CI_COMMIT_BRANCH == "develop"
    # Run pipeline for tags
    - if: $CI_COMMIT_TAG
    # Don't run pipeline in other cases
    - when: never